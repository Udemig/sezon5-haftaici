import { useEffect } from "react";
import { Col, Row } from "react-bootstrap";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";
import useApi from "../../../hooks/useApi";
import { setToken, setUser } from "../../../redux/authSlice";

export default function LoginPage() {
  const navigate = useNavigate();
  const api = useApi();
  const dispatch = useDispatch();

  /* Inputlardan bilgiyi almak iÃ§in birkaÃ§ tane yÃ¶ntem var. Bu yÃ¶ntemlerden
  en basit olanÄ± useState ve onChange birlikte kullanmaktÄ±r. Fakat bu yÃ¶ntemde
  her onchange olayÄ± trigger olduÄŸunda component tekrar render olacaÄŸÄ±ndan
  dolayÄ± bÃ¼yÃ¼k formlarda performans kaybÄ± oluÅŸur. Bunun yerine biraz daha
  performanslÄ± ve gÃ¼ncel bir yÃ¶ntem kullanacaÄŸÄ±z. */
  //const [email, setEmail] = useState("");

  console.log(">> Component render oldu.");

  useEffect(() => {
    (async () => {
      //
    })();
  }, []);

  async function onFormSubmit(e) {
    e.preventDefault();

    /* Formdan bilgiyi doÄŸrudan alÄ±p json haline Ã§evirme yÃ¶ntemini
    kullanacaÄŸÄ±z. Bu yÃ¶ntem sayesinde her input iÃ§in onChange eventlarÄ±nÄ±
    yazmaya gerek kalmayacak ve component tekrar render olmayacaÄŸÄ± iÃ§in
    performans kaybÄ± da yaÅŸanmaz.
    
    Bu yÃ¶ntemde ilk adÄ±m tÃ¼m inputlarÄ±n `name` property'lerini set
    ediyoruz. Sonra `e` parametresinden (event) formun kendisine ulaÅŸÄ±p
    bu formu json'a Ã§eviriyoruz.
    */

    /* FormData class'Ä± her tarayÄ±cÄ±da mevcuttur. Bu class bir form html
    elemanÄ± alÄ±r (e.target bizim form html elemanÄ±mÄ±zdÄ±r). Bu iÅŸlem bize
    form iÃ§erisinde name property'si tanÄ±mlÄ± olan inputlarÄ±n deÄŸerlerini
    Map class'Ä± olarak verir. */
    const data = new FormData(e.target);
    console.log("Map ÅŸekildeki form datasÄ±: ", data.entries());
    // Map ÅŸekildeki form datasÄ±:  FormData Iterator {}

    const exampleArr1 = ["ahmet", "mehmet", "ali", "veli"];
    const exampleArr2 = new Array();
    exampleArr2.push();
    exampleArr1.push();
    exampleArr1[1];

    /* `data.entries()` fonksiyonu bize tam olarak aÅŸaÄŸÄ±daki
    gibi bir Map objesi verir. Sonra bu objeyi `Object.fromEntries()`
    fonksiyonuyla JSON'a Ã§eviririz. */
    // const exampleMap = new Map();
    // exampleMap.set("email", "c20@user.com");
    // exampleMap.set("password", "123123");

    /* Map olarak gÃ¶nderilen parametreyi JSON haline getirir. */
    const formJson = Object.fromEntries(data.entries());
    console.warn("ğŸ”¥ | formJson:", formJson);
    // ğŸ”¥ | formJson: {email: 'c20@user.com', password: '123123'}

    const loginResult = await api.post("auth/login", formJson);
    console.warn("ğŸ”¥ | loginResult:", loginResult);

    if (loginResult.data.status === "success") {
      dispatch(setToken(loginResult.data.data.token));
      dispatch(setUser(loginResult.data.data.userData));

      navigate("/user");
    } else {
      alert("LÃ¼tfen bilgilerinizi kontrol ediniz.");
    }
  }

  return (
    <>
      <Row className="justify-content-center">
        <Col sm="12" md="12" lg="6">
          <Form onSubmit={onFormSubmit}>
            <Form.Group className="mb-3" controlId="loginForm.email">
              <Form.Label>Email address</Form.Label>
              <Form.Control
                onChange={(e) => {
                  e.target.value;
                }}
                type="email"
                name="email"
                placeholder="name@example.com"
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="loginForm.password">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                name="password"
                placeholder="Password here..."
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="loginForm.password">
              <Button type="submit" variant="primary" className="w-100 mt-3">
                <i className="fa-solid fa-right-to-bracket" />
                &nbsp; Login
              </Button>
            </Form.Group>
          </Form>
        </Col>
      </Row>
    </>
  );
}
